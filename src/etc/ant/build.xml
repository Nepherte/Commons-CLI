<project name="Commons CLI"
  default="package" basedir="../../../"
  xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Build script settings and dependencies -->
  <property file="src/etc/ant/build.properties"/>
  <property file="src/etc/ant/ant.properties"/>

  <!-- Location for additional Ant libraries -->
  <property name="ant.lib.dir" value="${user.home}/.ant/lib"/>

  <!-- Classpath to compile main code -->
  <path id="production.classpath">
    <path location="${target.classes}"/>
    <fileset dir="${target.artifacts}/default"/>
  </path>

  <!-- Classpath to compile test code -->
  <path id="test.classpath">
    <path location="${target.testing}"/>
    <fileset dir="${target.artifacts}/testing"/>
  </path>

  <!-- Classpath for Ant libraries -->
  <path id="ant.lib.path">
    <fileset dir="${ant.lib.dir}" includes="*.jar"/>
  </path>

  <!-- Deletes generated directories -->
  <target name="clean">
    <delete dir="${target.classes}"/>
    <delete dir="${target.testing}"/>
    <delete dir="${target.javadoc}"/>
    <delete dir="${target.reports}"/>
    <delete dir="${target.artifacts}"/>
  </target>

  <!-- Initializes build -->
  <target name="init">
    <!-- Create source directories -->
    <mkdir dir="${src.main.java}"/>
    <mkdir dir="${src.main.resources}"/>
    <mkdir dir="${src.test.java}"/>
    <mkdir dir="${src.test.resources}"/>

    <!-- Create target directories -->
    <mkdir dir="${target.classes}"/>
    <mkdir dir="${target.testing}"/>
    <mkdir dir="${target.javadoc}"/>
    <mkdir dir="${target.reports}"/>
    <mkdir dir="${target.artifacts}"/>

    <mkdir dir="${target.artifacts}/default"/>
    <mkdir dir="${target.artifacts}/testing"/>

    <!-- Create the Ant lib directory -->
    <mkdir dir="${ant.lib.dir}"/>

    <!-- Retrieve and download dependencies -->
    <get src="${apache-ivy}" dest="${ant.lib.dir}" usetimestamp="true"/>
    <get src="${jcraft-jsch}" dest="${ant.lib.dir}" usetimestamp="true"/>
    <get src="${commons-log}" dest="${ant.lib.dir}" usetimestamp="true"/>

    <taskdef resource="org/apache/ivy/ant/antlib.xml"
      uri="antlib:org.apache.ivy.ant" classpathref="ant.lib.path"/>
  </target>

  <!-- Resolves Ivy dependencies -->
  <target name="ivy" depends="init">
    <ivy:configure file="${ivy.settings.file}"/>
    <ivy:resolve file="${ivy.file}" conf="default"/>

    <ivy:retrieve conf="default" type="jar"
      pattern="${target.artifacts}/default/[artifact].[ext]"/>
    <ivy:retrieve conf="testing" type="jar"
      pattern="${target.artifacts}/testing/[artifact].[ext]"/>
  </target>

  <!-- Compiles source code -->
  <target name="compile" depends="init,ivy">

    <!-- Compile production code -->
    <javac includeantruntime="false" debug="true"
      source="1.8" srcdir="${src.main.java}"
      target="1.8" destdir="${target.classes}">

      <classpath>
        <path refid="production.classpath"/>
      </classpath>
    </javac>

    <!-- Compile test code -->
    <javac includeantruntime="false" debug="true"
      source="1.8" srcdir="${src.test.java}"
      target="1.8" destdir="${target.testing}">

      <classpath>
        <path refid="production.classpath"/>
        <path refid="test.classpath"/>
      </classpath>
    </javac>

    <!-- Copy resources -->
    <copy todir="${target.classes}">
      <fileset dir="${src.main.resources}"/>
    </copy>

    <!-- Copy test resources -->
    <copy todir="${target.testing}">
      <fileset dir="${src.test.resources}"/>
    </copy>
  </target>

  <!-- Generates test report -->
  <target name="testing" depends="init,compile">
    <junit printsummary="on"
      fork="true" forkmode="once"
      failureproperty="test.failed">

      <!-- JUnit classpath -->
      <classpath>
        <path refid="production.classpath"/>
        <path refid="test.classpath"/>
      </classpath>

      <!-- Report format -->
      <formatter type="plain"/>

      <!-- The tests to run -->
      <batchtest todir="${target.reports}">
        <fileset dir="${src.test.java}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Generates javadoc -->
  <target name="javadoc" depends="init,compile">
    <javadoc
      sourcepath="${src.main.java}" destdir="${target.javadoc}"
      windowtitle="${ant.project.name}" classpathref="production.classpath">

      <!-- Include reference to the Oracle javadoc -->
      <link href="https://docs.oracle.com/javase/8/docs/api/"/>
    </javadoc>
  </target>

  <!-- Creates artifacts -->
  <target name="package" depends="compile,testing,javadoc">
    <fail message="Abort: unit test(s) failed" if="test.failed"/>

    <property name="manifest.file" value="${target.artifacts}/MANIFEST.MF"/>
    <property name="artifact.id" value="${app.name}-${app.version}"/>

    <!-- Manifest file -->
    <manifest file="${manifest.file}">
      <attribute name="Implementation-Vendor" value="${app.vendor}"/>
      <attribute name="Implementation-Title" value="${app.name}"/>
      <attribute name="Implementation-Version" value="${app.version}"/>
    </manifest>

    <!-- Production jar -->
    <jar
      destfile="${target.artifacts}/${artifact.id}.jar"
      basedir="${target.classes}" manifest="${manifest.file}"/>

    <!-- Source code jar -->
    <jar
      destfile="${target.artifacts}/${artifact.id}-sources.jar"
      basedir="${src.main.java}" manifest="${manifest.file}"/>

    <!-- Javadoc jar -->
    <jar
      destfile="${target.artifacts}/${artifact.id}-javadoc.jar"
      basedir="${target.javadoc}" manifest="${manifest.file}"/>
  </target>

  <!-- Publish artifacts on ftp server -->
  <target name="publish" depends="package">
    <condition property="status" value="integration" else="release">
      <contains string="${app.version}" substring="SNAPSHOT"/>
    </condition>

    <condition property="overwrite" value="true" else="false">
      <contains string="${app.version}" substring="SNAPSHOT"/>
    </condition>

    <property
      name="artifact.pattern"
      value="[artifact]-[revision](-[classifier]).[ext]"/>

    <ivy:publish
      resolver="sftp" pubrevision="${app.version}"
      status="${status}" overwrite="${overwrite}"
      artifactspattern="${target.artifacts}/${artifact.pattern}">
    </ivy:publish>
  </target>

  <!-- Target for continuous integration -->
  <target name="ci" depends="clean,publish"/>
</project>
